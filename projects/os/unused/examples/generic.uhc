fn main() {
    let array;
    fputs(0, "[ \n");
    fputs(0, "GHKJLkgjhsudl\n");
    array = array_new(5);
    /*array_print(array);*/

    /*


    array_set(array, 0, 5);
    array_set(array, 1, 10);
    array_set(array, 2, 6);
    array_set(array, 3, 18);
    array_set(array, 4, 1);

    */
}


/* --- PRIVATE --- */

/* Calculate element offset */
fn _array32_offset(index)
{
	return add(mul(4, index), 8);
}

/* --- PUBLIC --- */

/* Create a new array with `capacity` */
fn array32_new(capacity)
{
	let array;
	array = alloc(_array32_offset(capacity));
	w32(array, capacity);
	w32(add(array, 4), 0);
	return array;
}

fn array32_get(array, index)
{
	return r32(add(array, _calc_off(index)));
}

fn array32_set(array, index, value)
{
	w32(add(array, _calc_off(index)), value);
}

fn array32_reserve(array, capacity)
{

}

fn array_capacity(array)
{
	return r32(array);
}

fn array_length(array)
{
	return r32(array);
}

fn array_print(array)
{
    let i;

    /* for i = 0 to sub(array_len(array), 1) {
        fputd(0, array_get(array, i));
        fputs(0, ", ");
    }

    fputs(0, " ]"); */
    return;
}

fn _check_bounds(array, index) {
    if hs(index, r32(array)) {
        exit 1;
    }
}

