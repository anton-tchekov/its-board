<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\ITSboard\ITSboard.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\ITSboard\ITSboard.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Wed Nov 22 14:57:28 2023
<BR><P>
<H3>Maximum Stack Usage =        536 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; l_joystick &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[1b3]">USART_Control</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b3]">USART_Control</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[77]">BSP_GetTick</a> from stm32f4xx_nucleo_bus.o(.text.BSP_GetTick) referenced from iks01a3.o(.text.accel_init)
 <LI><a href="#[77]">BSP_GetTick</a> from stm32f4xx_nucleo_bus.o(.text.BSP_GetTick) referenced from iks01a3.o(.text.hum_temp_init)
 <LI><a href="#[77]">BSP_GetTick</a> from stm32f4xx_nucleo_bus.o(.text.BSP_GetTick) referenced from iks01a3.o(.text.press_temp_init)
 <LI><a href="#[77]">BSP_GetTick</a> from stm32f4xx_nucleo_bus.o(.text.BSP_GetTick) referenced from iks01a3.o(.text.temp_init)
 <LI><a href="#[75]">BSP_I2C1_DeInit</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_DeInit) referenced from iks01a3.o(.text.accel_init)
 <LI><a href="#[75]">BSP_I2C1_DeInit</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_DeInit) referenced from iks01a3.o(.text.hum_temp_init)
 <LI><a href="#[75]">BSP_I2C1_DeInit</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_DeInit) referenced from iks01a3.o(.text.press_temp_init)
 <LI><a href="#[75]">BSP_I2C1_DeInit</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_DeInit) referenced from iks01a3.o(.text.temp_init)
 <LI><a href="#[76]">BSP_I2C1_Init</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_Init) referenced from iks01a3.o(.text.accel_init)
 <LI><a href="#[76]">BSP_I2C1_Init</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_Init) referenced from iks01a3.o(.text.hum_temp_init)
 <LI><a href="#[76]">BSP_I2C1_Init</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_Init) referenced from iks01a3.o(.text.press_temp_init)
 <LI><a href="#[76]">BSP_I2C1_Init</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_Init) referenced from iks01a3.o(.text.temp_init)
 <LI><a href="#[74]">BSP_I2C1_ReadReg</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_ReadReg) referenced from iks01a3.o(.text.accel_init)
 <LI><a href="#[74]">BSP_I2C1_ReadReg</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_ReadReg) referenced from iks01a3.o(.text.hum_temp_init)
 <LI><a href="#[74]">BSP_I2C1_ReadReg</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_ReadReg) referenced from iks01a3.o(.text.press_temp_init)
 <LI><a href="#[74]">BSP_I2C1_ReadReg</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_ReadReg) referenced from iks01a3.o(.text.temp_init)
 <LI><a href="#[78]">BSP_I2C1_WriteReg</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_WriteReg) referenced from iks01a3.o(.text.accel_init)
 <LI><a href="#[78]">BSP_I2C1_WriteReg</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_WriteReg) referenced from iks01a3.o(.text.hum_temp_init)
 <LI><a href="#[78]">BSP_I2C1_WriteReg</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_WriteReg) referenced from iks01a3.o(.text.press_temp_init)
 <LI><a href="#[78]">BSP_I2C1_WriteReg</a> from stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_WriteReg) referenced from iks01a3.o(.text.temp_init)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from stm32f4xx_it.o(.text.ETH_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[79]">HAL_GPIO_Init</a> from stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from init.o(.text.initITSboard)
 <LI><a href="#[73]">HAL_RCC_GetPCLK1Freq</a> from stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq) referenced from usart_stm32f4xx.o(.rodata.USART3_Resources)
 <LI><a href="#[73]">HAL_RCC_GetPCLK1Freq</a> from stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq) referenced from usart_stm32f4xx.o(.text.USART_Control)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8e]">LSM6DSO_DeInit</a> from lsm6dso.o(.text.LSM6DSO_DeInit) referenced from lsm6dso.o(.data.LSM6DSO_COMMON_Driver)
 <LI><a href="#[90]">LSM6DSO_GetCapabilities</a> from lsm6dso.o(.text.LSM6DSO_GetCapabilities) referenced from lsm6dso.o(.data.LSM6DSO_COMMON_Driver)
 <LI><a href="#[8d]">LSM6DSO_Init</a> from lsm6dso.o(.text.LSM6DSO_Init) referenced from lsm6dso.o(.data.LSM6DSO_COMMON_Driver)
 <LI><a href="#[8f]">LSM6DSO_ReadID</a> from lsm6dso.o(.text.LSM6DSO_ReadID) referenced from lsm6dso.o(.data.LSM6DSO_COMMON_Driver)
 <LI><a href="#[62]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6b]">ReadMagRegWrap</a> from lis2mdl.o(.text.ReadMagRegWrap) referenced from lis2mdl.o(.text.LIS2MDL_RegisterBusIO)
 <LI><a href="#[67]">ReadRegWrap</a> from hts221.o(.text.ReadRegWrap) referenced from hts221.o(.text.HTS221_RegisterBusIO)
 <LI><a href="#[69]">ReadRegWrap</a> from lis2dw12.o(.text.ReadRegWrap) referenced from lis2dw12.o(.text.LIS2DW12_RegisterBusIO)
 <LI><a href="#[6d]">ReadRegWrap</a> from lps22hh.o(.text.ReadRegWrap) referenced from lps22hh.o(.text.LPS22HH_RegisterBusIO)
 <LI><a href="#[6f]">ReadRegWrap</a> from lsm6dso.o(.text.ReadRegWrap) referenced from lsm6dso.o(.text.LSM6DSO_RegisterBusIO)
 <LI><a href="#[71]">ReadRegWrap</a> from stts751.o(.text.ReadRegWrap) referenced from stts751.o(.text.STTS751_RegisterBusIO)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(.text.SVC_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[89]">USART3_Control</a> from usart_stm32f4xx.o(.text.USART3_Control) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[80]">USART3_GetCapabilities</a> from usart_stm32f4xx.o(.text.USART3_GetCapabilities) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[8c]">USART3_GetModemStatus</a> from usart_stm32f4xx.o(.text.USART3_GetModemStatus) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[88]">USART3_GetRxCount</a> from usart_stm32f4xx.o(.text.USART3_GetRxCount) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[8a]">USART3_GetStatus</a> from usart_stm32f4xx.o(.text.USART3_GetStatus) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[87]">USART3_GetTxCount</a> from usart_stm32f4xx.o(.text.USART3_GetTxCount) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[31]">USART3_IRQHandler</a> from usart_stm32f4xx.o(.text.USART3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[81]">USART3_Initialize</a> from usart_stm32f4xx.o(.text.USART3_Initialize) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[83]">USART3_PowerControl</a> from usart_stm32f4xx.o(.text.USART3_PowerControl) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[85]">USART3_Receive</a> from usart_stm32f4xx.o(.text.USART3_Receive) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[84]">USART3_Send</a> from usart_stm32f4xx.o(.text.USART3_Send) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[8b]">USART3_SetModemControl</a> from usart_stm32f4xx.o(.text.USART3_SetModemControl) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[86]">USART3_Transfer</a> from usart_stm32f4xx.o(.text.USART3_Transfer) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[82]">USART3_Uninitialize</a> from usart_stm32f4xx.o(.text.USART3_Uninitialize) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7f]">USARTx_GetVersion</a> from usart_stm32f4xx.o(.text.USARTx_GetVersion) referenced from usart_stm32f4xx.o(.rodata.Driver_USART3)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6c]">WriteMagRegWrap</a> from lis2mdl.o(.text.WriteMagRegWrap) referenced from lis2mdl.o(.text.LIS2MDL_RegisterBusIO)
 <LI><a href="#[68]">WriteRegWrap</a> from hts221.o(.text.WriteRegWrap) referenced from hts221.o(.text.HTS221_RegisterBusIO)
 <LI><a href="#[6a]">WriteRegWrap</a> from lis2dw12.o(.text.WriteRegWrap) referenced from lis2dw12.o(.text.LIS2DW12_RegisterBusIO)
 <LI><a href="#[6e]">WriteRegWrap</a> from lps22hh.o(.text.WriteRegWrap) referenced from lps22hh.o(.text.LPS22HH_RegisterBusIO)
 <LI><a href="#[70]">WriteRegWrap</a> from lsm6dso.o(.text.WriteRegWrap) referenced from lsm6dso.o(.text.LSM6DSO_RegisterBusIO)
 <LI><a href="#[72]">WriteRegWrap</a> from stts751.o(.text.WriteRegWrap) referenced from stts751.o(.text.STTS751_RegisterBusIO)
 <LI><a href="#[7b]">__2printf</a> from printfa.o(i.__0printf) referenced from main.o(.text.l_demo)
 <LI><a href="#[7b]">__2printf</a> from printfa.o(i.__0printf) referenced from main.o(.text.main)
 <LI><a href="#[66]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[7e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[92]">acc_gyro_enable_acc</a> from iks01a3.o(.text.acc_gyro_enable_acc) referenced from iks01a3.o(.data.acc_gyro)
 <LI><a href="#[93]">acc_gyro_enable_gyro</a> from iks01a3.o(.text.acc_gyro_enable_gyro) referenced from iks01a3.o(.data.acc_gyro)
 <LI><a href="#[95]">acc_gyro_get_a_axes</a> from iks01a3.o(.text.acc_gyro_get_a_axes) referenced from iks01a3.o(.data.acc_gyro)
 <LI><a href="#[96]">acc_gyro_get_g_axes</a> from iks01a3.o(.text.acc_gyro_get_g_axes) referenced from iks01a3.o(.data.acc_gyro)
 <LI><a href="#[91]">acc_gyro_init</a> from iks01a3.o(.text.acc_gyro_init) referenced from iks01a3.o(.data.acc_gyro)
 <LI><a href="#[94]">acc_gyro_read_id</a> from iks01a3.o(.text.acc_gyro_read_id) referenced from iks01a3.o(.data.acc_gyro)
 <LI><a href="#[98]">accel_enable_acc</a> from iks01a3.o(.text.accel_enable_acc) referenced from iks01a3.o(.data.accelerometer)
 <LI><a href="#[9a]">accel_get_a_axes</a> from iks01a3.o(.text.accel_get_a_axes) referenced from iks01a3.o(.data.accelerometer)
 <LI><a href="#[97]">accel_init</a> from iks01a3.o(.text.accel_init) referenced from iks01a3.o(.data.accelerometer)
 <LI><a href="#[99]">accel_read_id</a> from iks01a3.o(.text.accel_read_id) referenced from iks01a3.o(.data.accelerometer)
 <LI><a href="#[7d]">fputc</a> from retarget_io.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[9c]">hum_temp_enable_hum</a> from iks01a3.o(.text.hum_temp_enable_hum) referenced from iks01a3.o(.data.hum_temp)
 <LI><a href="#[9d]">hum_temp_enable_temp</a> from iks01a3.o(.text.hum_temp_enable_temp) referenced from iks01a3.o(.data.hum_temp)
 <LI><a href="#[9f]">hum_temp_get_hum</a> from iks01a3.o(.text.hum_temp_get_hum) referenced from iks01a3.o(.data.hum_temp)
 <LI><a href="#[a0]">hum_temp_get_temp</a> from iks01a3.o(.text.hum_temp_get_temp) referenced from iks01a3.o(.data.hum_temp)
 <LI><a href="#[9b]">hum_temp_init</a> from iks01a3.o(.text.hum_temp_init) referenced from iks01a3.o(.data.hum_temp)
 <LI><a href="#[9e]">hum_temp_read_id</a> from iks01a3.o(.text.hum_temp_read_id) referenced from iks01a3.o(.data.hum_temp)
 <LI><a href="#[a2]">mag_enable_acc</a> from iks01a3.o(.text.mag_enable_acc) referenced from iks01a3.o(.data.magnetometer)
 <LI><a href="#[a4]">mag_get_a_axes</a> from iks01a3.o(.text.mag_get_a_axes) referenced from iks01a3.o(.data.magnetometer)
 <LI><a href="#[a1]">mag_init</a> from iks01a3.o(.text.mag_init) referenced from iks01a3.o(.data.magnetometer)
 <LI><a href="#[a3]">mag_read_id</a> from iks01a3.o(.text.mag_read_id) referenced from iks01a3.o(.data.magnetometer)
 <LI><a href="#[64]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a6]">press_temp_enable_press</a> from iks01a3.o(.text.press_temp_enable_press) referenced from iks01a3.o(.data.press_temp)
 <LI><a href="#[a7]">press_temp_enable_temp</a> from iks01a3.o(.text.press_temp_enable_temp) referenced from iks01a3.o(.data.press_temp)
 <LI><a href="#[a9]">press_temp_get_press</a> from iks01a3.o(.text.press_temp_get_press) referenced from iks01a3.o(.data.press_temp)
 <LI><a href="#[aa]">press_temp_get_temp</a> from iks01a3.o(.text.press_temp_get_temp) referenced from iks01a3.o(.data.press_temp)
 <LI><a href="#[a5]">press_temp_init</a> from iks01a3.o(.text.press_temp_init) referenced from iks01a3.o(.data.press_temp)
 <LI><a href="#[a8]">press_temp_read_id</a> from iks01a3.o(.text.press_temp_read_id) referenced from iks01a3.o(.data.press_temp)
 <LI><a href="#[7c]">print_double</a> from main.o(.text.print_double) referenced from main.o(.text.l_demo)
 <LI><a href="#[7a]">puts</a> from puts.o(i.puts) referenced from main.o(.text.l_demo)
 <LI><a href="#[ac]">temp_enable_temp</a> from iks01a3.o(.text.temp_enable_temp) referenced from iks01a3.o(.data.temp)
 <LI><a href="#[ae]">temp_get_temp</a> from iks01a3.o(.text.temp_get_temp) referenced from iks01a3.o(.data.temp)
 <LI><a href="#[ab]">temp_init</a> from iks01a3.o(.text.temp_init) referenced from iks01a3.o(.data.temp)
 <LI><a href="#[ad]">temp_read_id</a> from iks01a3.o(.text.temp_read_id) referenced from iks01a3.o(.data.temp)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[66]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[21a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[af]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[21b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[21c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[21d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[21e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[21f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
</UL>

<P><STRONG><a name="[222]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[201]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_double
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_joystick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_double
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_joystick
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_double
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_double
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_double
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_joystick
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_demo
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_joystick
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[224]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[225]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[226]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[228]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[213]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[22a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>BSP_GetTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_nucleo_bus.o(.text.BSP_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 4]<UL><LI> iks01a3.o(.text.accel_init)
<LI> iks01a3.o(.text.hum_temp_init)
<LI> iks01a3.o(.text.press_temp_init)
<LI> iks01a3.o(.text.temp_init)
</UL>
<P><STRONG><a name="[75]"></a>BSP_I2C1_DeInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_I2C1_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 4]<UL><LI> iks01a3.o(.text.accel_init)
<LI> iks01a3.o(.text.hum_temp_init)
<LI> iks01a3.o(.text.press_temp_init)
<LI> iks01a3.o(.text.temp_init)
</UL>
<P><STRONG><a name="[76]"></a>BSP_I2C1_Init</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSP_I2C1_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>
<BR>[Address Reference Count : 4]<UL><LI> iks01a3.o(.text.accel_init)
<LI> iks01a3.o(.text.hum_temp_init)
<LI> iks01a3.o(.text.press_temp_init)
<LI> iks01a3.o(.text.temp_init)
</UL>
<P><STRONG><a name="[74]"></a>BSP_I2C1_ReadReg</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_I2C1_ReadReg &rArr; OUTLINED_FUNCTION_7 &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_28 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 4]<UL><LI> iks01a3.o(.text.accel_init)
<LI> iks01a3.o(.text.hum_temp_init)
<LI> iks01a3.o(.text.press_temp_init)
<LI> iks01a3.o(.text.temp_init)
</UL>
<P><STRONG><a name="[78]"></a>BSP_I2C1_WriteReg</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, stm32f4xx_nucleo_bus.o(.text.BSP_I2C1_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_I2C1_WriteReg &rArr; OUTLINED_FUNCTION_6 &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; OUTLINED_FUNCTION_43 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 4]<UL><LI> iks01a3.o(.text.accel_init)
<LI> iks01a3.o(.text.hum_temp_init)
<LI> iks01a3.o(.text.press_temp_init)
<LI> iks01a3.o(.text.temp_init)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_IRQHandler &rArr; HAL_ETH_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>Error_Handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, error.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Error_Handler &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initITSboard
</UL>

<P><STRONG><a name="[d2]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[d5]"></a>HAL_ETH_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(.text.HAL_ETH_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_ETH_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_eth.o(.text.HAL_ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ErrorCallback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_ETH_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(.text.HAL_ETH_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_ETH_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(.text.HAL_ETH_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 212 bytes, Stack size 36 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Uninitialize
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_DeInit
</UL>

<P><STRONG><a name="[79]"></a>HAL_GPIO_Init</STRONG> (Thumb, 384 bytes, Stack size 44 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.text.initITSboard)
</UL>
<P><STRONG><a name="[d1]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_44
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
</UL>

<P><STRONG><a name="[d6]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[c7]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_59
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_DeInit
</UL>

<P><STRONG><a name="[19d]"></a>HAL_I2C_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[c8]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_I2C_Init</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_73
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_76
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_59
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_28 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_47
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_46
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_71
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_35
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_82
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_80
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_57
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_44
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>

<P><STRONG><a name="[f4]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; OUTLINED_FUNCTION_43 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_46
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_71
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_35
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_82
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_44
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[db]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[dd]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fc]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initITSboard
</UL>

<P><STRONG><a name="[fe]"></a>HAL_InitTick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ff]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[102]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[101]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[fd]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f4xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initITSboard
</UL>

<P><STRONG><a name="[106]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initITSboard
</UL>

<P><STRONG><a name="[73]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usart_stm32f4xx.o(.text.USART_Control)
<LI> usart_stm32f4xx.o(.rodata.USART3_Resources)
</UL>
<P><STRONG><a name="[108]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[109]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 780 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initITSboard
</UL>

<P><STRONG><a name="[100]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1ce]"></a>HTS221_GetCapabilities</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hts221.o(.text.HTS221_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_init
</UL>

<P><STRONG><a name="[10b]"></a>HTS221_HUM_Enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_HUM_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HTS221_HUM_Enable &rArr; OUTLINED_FUNCTION_3 &rArr; hts221_power_on_set
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_enable_hum
</UL>

<P><STRONG><a name="[10e]"></a>HTS221_HUM_GetHumidity</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, hts221.o(.text.HTS221_HUM_GetHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HTS221_HUM_GetHumidity &rArr; hts221_humidity_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_humidity_raw_get
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_rh_point_1_get
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_adc_point_1_get
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_rh_point_0_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_adc_point_0_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_get_hum
</UL>

<P><STRONG><a name="[115]"></a>HTS221_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hts221.o(.text.HTS221_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HTS221_Init &rArr; HTS221_SetOutputDataRate &rArr; hts221_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_block_data_update_set
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_SetOutputDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_init
</UL>

<P><STRONG><a name="[119]"></a>HTS221_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HTS221_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_read_id
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_init
</UL>

<P><STRONG><a name="[1cd]"></a>HTS221_RegisterBusIO</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HTS221_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_init
</UL>

<P><STRONG><a name="[11c]"></a>HTS221_TEMP_Enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_TEMP_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HTS221_TEMP_Enable &rArr; OUTLINED_FUNCTION_3 &rArr; hts221_power_on_set
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_enable_temp
</UL>

<P><STRONG><a name="[11d]"></a>HTS221_TEMP_GetTemperature</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, hts221.o(.text.HTS221_TEMP_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HTS221_TEMP_GetTemperature &rArr; hts221_temperature_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temperature_raw_get
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_deg_point_1_get
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_adc_point_1_get
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_deg_point_0_get
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_adc_point_0_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_get_temp
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>LIS2DW12_ACC_Enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lis2dw12.o(.text.LIS2DW12_ACC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LIS2DW12_ACC_Enable &rArr; LIS2DW12_ACC_SetOutputDataRate_When_Enabled &rArr; lis2dw12_data_rate_set &rArr; OUTLINED_FUNCTION_1
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_SetOutputDataRate_When_Enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_enable_acc
</UL>

<P><STRONG><a name="[12e]"></a>LIS2DW12_ACC_GetAxes</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lis2dw12.o(.text.LIS2DW12_ACC_GetAxes))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LIS2DW12_ACC_GetAxes &rArr; LIS2DW12_ACC_GetAxesRaw &rArr; lis2dw12_power_mode_get &rArr; OUTLINED_FUNCTION_1
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_GetAxesRaw
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_GetSensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_get_a_axes
</UL>

<P><STRONG><a name="[12f]"></a>LIS2DW12_ACC_GetAxesRaw</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lis2dw12.o(.text.LIS2DW12_ACC_GetAxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LIS2DW12_ACC_GetAxesRaw &rArr; lis2dw12_power_mode_get &rArr; OUTLINED_FUNCTION_1
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_acceleration_raw_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_GetAxes
</UL>

<P><STRONG><a name="[130]"></a>LIS2DW12_ACC_GetSensitivity</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lis2dw12.o(.text.LIS2DW12_ACC_GetSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LIS2DW12_ACC_GetSensitivity &rArr; lis2dw12_power_mode_get &rArr; OUTLINED_FUNCTION_1
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_get
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_full_scale_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_GetAxes
</UL>

<P><STRONG><a name="[1be]"></a>LIS2DW12_GetCapabilities</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lis2dw12.o(.text.LIS2DW12_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_init
</UL>

<P><STRONG><a name="[137]"></a>LIS2DW12_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lis2dw12.o(.text.LIS2DW12_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LIS2DW12_Init &rArr; lis2dw12_full_scale_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_full_scale_set
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_data_rate_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_set
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_fifo_mode_set
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_block_data_update_set
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_auto_increment_set
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_init
</UL>

<P><STRONG><a name="[13c]"></a>LIS2DW12_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lis2dw12.o(.text.LIS2DW12_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LIS2DW12_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_read_id
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_init
</UL>

<P><STRONG><a name="[13e]"></a>LIS2DW12_RegisterBusIO</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lis2dw12.o(.text.LIS2DW12_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LIS2DW12_RegisterBusIO &rArr; LIS2DW12_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_init
</UL>

<P><STRONG><a name="[13f]"></a>LIS2DW12_Write_Reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lis2dw12.o(.text.LIS2DW12_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LIS2DW12_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_RegisterBusIO
</UL>

<P><STRONG><a name="[1fd]"></a>LIS2MDL_GetCapabilities</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lis2mdl.o(.text.LIS2MDL_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LIS2MDL_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_init
</UL>

<P><STRONG><a name="[141]"></a>LIS2MDL_Init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lis2mdl.o(.text.LIS2MDL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LIS2MDL_Init &rArr; OUTLINED_FUNCTION_1 &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_self_test_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_data_rate_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_operating_mode_set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_block_data_update_set
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_init
</UL>

<P><STRONG><a name="[14a]"></a>LIS2MDL_MAG_Enable</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lis2mdl.o(.text.LIS2MDL_MAG_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LIS2MDL_MAG_Enable &rArr; OUTLINED_FUNCTION_1 &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_operating_mode_set
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_enable_acc
</UL>

<P><STRONG><a name="[14c]"></a>LIS2MDL_MAG_GetAxes</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lis2mdl.o(.text.LIS2MDL_MAG_GetAxes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LIS2MDL_MAG_GetAxes &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_magnetic_raw_get
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_get_a_axes
</UL>

<P><STRONG><a name="[14f]"></a>LIS2MDL_ReadID</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lis2mdl.o(.text.LIS2MDL_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LIS2MDL_ReadID &rArr; OUTLINED_FUNCTION_2 &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_device_id_get
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_read_id
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_init
</UL>

<P><STRONG><a name="[151]"></a>LIS2MDL_RegisterBusIO</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lis2mdl.o(.text.LIS2MDL_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LIS2MDL_RegisterBusIO &rArr; LIS2MDL_Write_Reg &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_i2c_interface_set
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_init
</UL>

<P><STRONG><a name="[152]"></a>LIS2MDL_Write_Reg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lis2mdl.o(.text.LIS2MDL_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LIS2MDL_Write_Reg &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_RegisterBusIO
</UL>

<P><STRONG><a name="[1ff]"></a>LPS22HH_GetCapabilities</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lps22hh.o(.text.LPS22HH_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_init
</UL>

<P><STRONG><a name="[155]"></a>LPS22HH_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LPS22HH_Init &rArr; lps22hh_auto_increment_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_auto_increment_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_block_data_update_set
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_lp_bandwidth_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_i3c_interface_set
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_init
</UL>

<P><STRONG><a name="[15c]"></a>LPS22HH_PRESS_Enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hh.o(.text.LPS22HH_PRESS_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_PRESS_Enable &rArr; OUTLINED_FUNCTION_3 &rArr; lps22hh_data_rate_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_enable_press
</UL>

<P><STRONG><a name="[15f]"></a>LPS22HH_PRESS_GetPressure</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_PRESS_GetPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPS22HH_PRESS_GetPressure &rArr; lps22hh_pressure_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_from_lsb_to_hpa
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_pressure_raw_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_get_press
</UL>

<P><STRONG><a name="[163]"></a>LPS22HH_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hh.o(.text.LPS22HH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPS22HH_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_read_id
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_init
</UL>

<P><STRONG><a name="[165]"></a>LPS22HH_RegisterBusIO</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lps22hh.o(.text.LPS22HH_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPS22HH_RegisterBusIO &rArr; LPS22HH_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Write_Reg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_init
</UL>

<P><STRONG><a name="[167]"></a>LPS22HH_TEMP_Enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hh.o(.text.LPS22HH_TEMP_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_TEMP_Enable &rArr; OUTLINED_FUNCTION_3 &rArr; lps22hh_data_rate_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_enable_temp
</UL>

<P><STRONG><a name="[168]"></a>LPS22HH_TEMP_GetTemperature</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_TEMP_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPS22HH_TEMP_GetTemperature &rArr; lps22hh_temperature_raw_get &rArr; OUTLINED_FUNCTION_10
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_from_lsb_to_celsius
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_temperature_raw_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_get_temp
</UL>

<P><STRONG><a name="[166]"></a>LPS22HH_Write_Reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hh.o(.text.LPS22HH_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPS22HH_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_RegisterBusIO
</UL>

<P><STRONG><a name="[16f]"></a>LSM6DSO_ACC_Disable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dso.o(.text.LSM6DSO_ACC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LSM6DSO_ACC_Disable &rArr; lsm6dso_xl_data_rate_set &rArr; lsm6dso_fsm_data_rate_get &rArr; OUTLINED_FUNCTION_16 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_get
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_DeInit
</UL>

<P><STRONG><a name="[172]"></a>LSM6DSO_ACC_Enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm6dso.o(.text.LSM6DSO_ACC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LSM6DSO_ACC_Enable &rArr; lsm6dso_xl_data_rate_set &rArr; lsm6dso_fsm_data_rate_get &rArr; OUTLINED_FUNCTION_16 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_gyro_enable_acc
</UL>

<P><STRONG><a name="[174]"></a>LSM6DSO_ACC_GetAxes</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GetAxes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LSM6DSO_ACC_GetAxes &rArr; LSM6DSO_ACC_GetSensitivity &rArr; lsm6dso_xl_full_scale_get
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_acceleration_raw_get
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GetSensitivity
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_gyro_get_a_axes
</UL>

<P><STRONG><a name="[177]"></a>LSM6DSO_ACC_GetSensitivity</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GetSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM6DSO_ACC_GetSensitivity &rArr; lsm6dso_xl_full_scale_get
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_full_scale_get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GetAxes
</UL>

<P><STRONG><a name="[8e]"></a>LSM6DSO_DeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6dso.o(.text.LSM6DSO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSO_DeInit &rArr; LSM6DSO_GYRO_Disable &rArr; lsm6dso_gy_data_rate_set &rArr; lsm6dso_fsm_data_rate_get &rArr; OUTLINED_FUNCTION_16 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_Disable
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Disable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dso.o(.data.LSM6DSO_COMMON_Driver)
</UL>
<P><STRONG><a name="[17c]"></a>LSM6DSO_GYRO_Disable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dso.o(.text.LSM6DSO_GYRO_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LSM6DSO_GYRO_Disable &rArr; lsm6dso_gy_data_rate_set &rArr; lsm6dso_fsm_data_rate_get &rArr; OUTLINED_FUNCTION_16 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_DeInit
</UL>

<P><STRONG><a name="[17f]"></a>LSM6DSO_GYRO_Enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm6dso.o(.text.LSM6DSO_GYRO_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LSM6DSO_GYRO_Enable &rArr; lsm6dso_gy_data_rate_set &rArr; lsm6dso_fsm_data_rate_get &rArr; OUTLINED_FUNCTION_16 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_gyro_enable_gyro
</UL>

<P><STRONG><a name="[180]"></a>LSM6DSO_GYRO_GetAxes</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_GYRO_GetAxes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LSM6DSO_GYRO_GetAxes &rArr; LSM6DSO_GYRO_GetSensitivity &rArr; lsm6dso_gy_full_scale_get
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_angular_rate_raw_get
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_GetSensitivity
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_gyro_get_g_axes
</UL>

<P><STRONG><a name="[182]"></a>LSM6DSO_GYRO_GetSensitivity</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lsm6dso.o(.text.LSM6DSO_GYRO_GetSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM6DSO_GYRO_GetSensitivity &rArr; lsm6dso_gy_full_scale_get
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_full_scale_get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_GetAxes
</UL>

<P><STRONG><a name="[90]"></a>LSM6DSO_GetCapabilities</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dso.o(.text.LSM6DSO_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSM6DSO_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_gyro_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dso.o(.data.LSM6DSO_COMMON_Driver)
</UL>
<P><STRONG><a name="[8d]"></a>LSM6DSO_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lsm6dso.o(.text.LSM6DSO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LSM6DSO_Init &rArr; lsm6dso_gy_data_rate_set &rArr; lsm6dso_fsm_data_rate_get &rArr; OUTLINED_FUNCTION_16 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_full_scale_set
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_full_scale_set
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_mode_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_block_data_update_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_auto_increment_set
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_i3c_disable_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dso.o(.data.LSM6DSO_COMMON_Driver)
</UL>
<P><STRONG><a name="[8f]"></a>LSM6DSO_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dso.o(.text.LSM6DSO_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSM6DSO_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_gyro_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_gyro_read_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dso.o(.data.LSM6DSO_COMMON_Driver)
</UL>
<P><STRONG><a name="[18b]"></a>LSM6DSO_RegisterBusIO</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lsm6dso.o(.text.LSM6DSO_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSM6DSO_RegisterBusIO &rArr; LSM6DSO_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Write_Reg
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_gyro_init
</UL>

<P><STRONG><a name="[18c]"></a>LSM6DSO_Write_Reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lsm6dso.o(.text.LSM6DSO_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSM6DSO_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_RegisterBusIO
</UL>

<P><STRONG><a name="[c9]"></a>MX_I2C1_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_nucleo_bus.o(.text.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[207]"></a>STTS751_GetCapabilities</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stts751.o(.text.STTS751_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_init
</UL>

<P><STRONG><a name="[1a4]"></a>STTS751_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stts751.o(.text.STTS751_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STTS751_Init &rArr; stts751_temp_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_temp_data_rate_set
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_resolution_set
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_pin_event_route_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_init
</UL>

<P><STRONG><a name="[1a8]"></a>STTS751_ReadID</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stts751.o(.text.STTS751_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STTS751_ReadID &rArr; stts751_device_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_device_id_get
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_read_id
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_init
</UL>

<P><STRONG><a name="[206]"></a>STTS751_RegisterBusIO</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stts751.o(.text.STTS751_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STTS751_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_init
</UL>

<P><STRONG><a name="[1ab]"></a>STTS751_TEMP_Enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stts751.o(.text.STTS751_TEMP_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STTS751_TEMP_Enable &rArr; STTS751_TEMP_SetOutputDataRate &rArr; stts751_temp_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_TEMP_SetOutputDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_enable_temp
</UL>

<P><STRONG><a name="[1ad]"></a>STTS751_TEMP_GetTemperature</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stts751.o(.text.STTS751_TEMP_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STTS751_TEMP_GetTemperature &rArr; stts751_temperature_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_from_lsb_to_celsius
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_temperature_raw_get
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_get_temp
</UL>

<P><STRONG><a name="[1ac]"></a>STTS751_TEMP_SetOutputDataRate</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, stts751.o(.text.STTS751_TEMP_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = STTS751_TEMP_SetOutputDataRate &rArr; stts751_temp_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_resolution_get
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_temp_data_rate_set
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_resolution_set
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_TEMP_Enable
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SystemInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b4]"></a>USART_IRQHandler</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, usart_stm32f4xx.o(.text.USART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>acc_gyro_enable_acc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iks01a3.o(.text.acc_gyro_enable_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = acc_gyro_enable_acc &rArr; LSM6DSO_ACC_Enable &rArr; lsm6dso_xl_data_rate_set &rArr; lsm6dso_fsm_data_rate_get &rArr; OUTLINED_FUNCTION_16 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.acc_gyro)
</UL>
<P><STRONG><a name="[93]"></a>acc_gyro_enable_gyro</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iks01a3.o(.text.acc_gyro_enable_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = acc_gyro_enable_gyro &rArr; LSM6DSO_GYRO_Enable &rArr; lsm6dso_gy_data_rate_set &rArr; lsm6dso_fsm_data_rate_get &rArr; OUTLINED_FUNCTION_16 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.acc_gyro)
</UL>
<P><STRONG><a name="[95]"></a>acc_gyro_get_a_axes</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, iks01a3.o(.text.acc_gyro_get_a_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = acc_gyro_get_a_axes &rArr; LSM6DSO_ACC_GetAxes &rArr; LSM6DSO_ACC_GetSensitivity &rArr; lsm6dso_xl_full_scale_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GetAxes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.acc_gyro)
</UL>
<P><STRONG><a name="[96]"></a>acc_gyro_get_g_axes</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, iks01a3.o(.text.acc_gyro_get_g_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = acc_gyro_get_g_axes &rArr; LSM6DSO_GYRO_GetAxes &rArr; LSM6DSO_GYRO_GetSensitivity &rArr; lsm6dso_gy_full_scale_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_GetAxes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.acc_gyro)
</UL>
<P><STRONG><a name="[91]"></a>acc_gyro_init</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, iks01a3.o(.text.acc_gyro_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = acc_gyro_init &rArr; LSM6DSO_RegisterBusIO &rArr; LSM6DSO_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_RegisterBusIO
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GetCapabilities
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ReadID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.acc_gyro)
</UL>
<P><STRONG><a name="[94]"></a>acc_gyro_read_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iks01a3.o(.text.acc_gyro_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = acc_gyro_read_id &rArr; LSM6DSO_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ReadID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.acc_gyro)
</UL>
<P><STRONG><a name="[98]"></a>accel_enable_acc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iks01a3.o(.text.accel_enable_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = accel_enable_acc &rArr; LIS2DW12_ACC_Enable &rArr; LIS2DW12_ACC_SetOutputDataRate_When_Enabled &rArr; lis2dw12_data_rate_set &rArr; OUTLINED_FUNCTION_1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.accelerometer)
</UL>
<P><STRONG><a name="[9a]"></a>accel_get_a_axes</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, iks01a3.o(.text.accel_get_a_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = accel_get_a_axes &rArr; LIS2DW12_ACC_GetAxes &rArr; LIS2DW12_ACC_GetAxesRaw &rArr; lis2dw12_power_mode_get &rArr; OUTLINED_FUNCTION_1
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_GetAxes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.accelerometer)
</UL>
<P><STRONG><a name="[97]"></a>accel_init</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, iks01a3.o(.text.accel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = accel_init &rArr; LIS2DW12_Init &rArr; lis2dw12_full_scale_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_GetCapabilities
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ReadID
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_RegisterBusIO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.accelerometer)
</UL>
<P><STRONG><a name="[99]"></a>accel_read_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iks01a3.o(.text.accel_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = accel_read_id &rArr; LIS2DW12_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ReadID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.accelerometer)
</UL>
<P><STRONG><a name="[1bf]"></a>delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, delay.o(.text.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_measure
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alarm
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_demo
</UL>

<P><STRONG><a name="[7d]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget_io.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[117]"></a>hts221_block_data_update_set</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_block_data_update_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[11b]"></a>hts221_data_rate_set</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_SetOutputDataRate
</UL>

<P><STRONG><a name="[11a]"></a>hts221_device_id_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hts221_reg.o(.text.hts221_device_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadID
</UL>

<P><STRONG><a name="[10f]"></a>hts221_hum_adc_point_0_get</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_hum_adc_point_0_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_hum_adc_point_0_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[111]"></a>hts221_hum_adc_point_1_get</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_hum_adc_point_1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_hum_adc_point_1_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[110]"></a>hts221_hum_rh_point_0_get</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_hum_rh_point_0_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_hum_rh_point_0_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[112]"></a>hts221_hum_rh_point_1_get</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_hum_rh_point_1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_hum_rh_point_1_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[113]"></a>hts221_humidity_raw_get</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_humidity_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_humidity_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[116]"></a>hts221_power_on_set</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_power_on_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_power_on_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[11e]"></a>hts221_temp_adc_point_0_get</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_temp_adc_point_0_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_temp_adc_point_0_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[120]"></a>hts221_temp_adc_point_1_get</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_temp_adc_point_1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_temp_adc_point_1_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[11f]"></a>hts221_temp_deg_point_0_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_temp_deg_point_0_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_temp_deg_point_0_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[121]"></a>hts221_temp_deg_point_1_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_temp_deg_point_1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_temp_deg_point_1_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[122]"></a>hts221_temperature_raw_get</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, hts221_reg.o(.text.hts221_temperature_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hts221_temperature_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[9c]"></a>hum_temp_enable_hum</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iks01a3.o(.text.hum_temp_enable_hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hum_temp_enable_hum &rArr; HTS221_HUM_Enable &rArr; OUTLINED_FUNCTION_3 &rArr; hts221_power_on_set
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.hum_temp)
</UL>
<P><STRONG><a name="[9d]"></a>hum_temp_enable_temp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iks01a3.o(.text.hum_temp_enable_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hum_temp_enable_temp &rArr; HTS221_TEMP_Enable &rArr; OUTLINED_FUNCTION_3 &rArr; hts221_power_on_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.hum_temp)
</UL>
<P><STRONG><a name="[9f]"></a>hum_temp_get_hum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iks01a3.o(.text.hum_temp_get_hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hum_temp_get_hum &rArr; HTS221_HUM_GetHumidity &rArr; hts221_humidity_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.hum_temp)
</UL>
<P><STRONG><a name="[a0]"></a>hum_temp_get_temp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iks01a3.o(.text.hum_temp_get_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hum_temp_get_temp &rArr; HTS221_TEMP_GetTemperature &rArr; hts221_temperature_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.hum_temp)
</UL>
<P><STRONG><a name="[9b]"></a>hum_temp_init</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, iks01a3.o(.text.hum_temp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hum_temp_init &rArr; HTS221_Init &rArr; HTS221_SetOutputDataRate &rArr; hts221_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetCapabilities
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadID
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_RegisterBusIO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.hum_temp)
</UL>
<P><STRONG><a name="[9e]"></a>hum_temp_read_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iks01a3.o(.text.hum_temp_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hum_temp_read_id &rArr; HTS221_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.hum_temp)
</UL>
<P><STRONG><a name="[1cf]"></a>initITSboard</STRONG> (Thumb, 308 bytes, Stack size 104 bytes, init.o(.text.initITSboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = initITSboard &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdinout_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fe]"></a>initTimer</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timer.o(.text.initTimer))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d3]"></a>l_alarm</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, main.o(.text.l_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = l_alarm &rArr; puts &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d4]"></a>l_buffer</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, main.o(.text.l_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = l_buffer &rArr; puts &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d5]"></a>l_csv</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, main.o(.text.l_csv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = l_csv &rArr; puts &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d6]"></a>l_demo</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, main.o(.text.l_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = l_demo &rArr; puts &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d8]"></a>l_joystick</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, main.o(.text.l_joystick))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = l_joystick &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1da]"></a>l_measure</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.l_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l_measure &rArr; puts &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>lis2dw12_acceleration_raw_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lis2dw12_reg.o(.text.lis2dw12_acceleration_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lis2dw12_acceleration_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_GetAxesRaw
</UL>

<P><STRONG><a name="[138]"></a>lis2dw12_auto_increment_set</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lis2dw12_reg.o(.text.lis2dw12_auto_increment_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lis2dw12_auto_increment_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_Init
</UL>

<P><STRONG><a name="[139]"></a>lis2dw12_block_data_update_set</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lis2dw12_reg.o(.text.lis2dw12_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lis2dw12_block_data_update_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_Init
</UL>

<P><STRONG><a name="[135]"></a>lis2dw12_data_rate_set</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lis2dw12_reg.o(.text.lis2dw12_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lis2dw12_data_rate_set &rArr; OUTLINED_FUNCTION_1
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_SetOutputDataRate_When_Enabled
</UL>

<P><STRONG><a name="[13d]"></a>lis2dw12_device_id_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lis2dw12_reg.o(.text.lis2dw12_device_id_get))
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ReadID
</UL>

<P><STRONG><a name="[13a]"></a>lis2dw12_fifo_mode_set</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lis2dw12_reg.o(.text.lis2dw12_fifo_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lis2dw12_fifo_mode_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_Init
</UL>

<P><STRONG><a name="[133]"></a>lis2dw12_full_scale_get</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lis2dw12_reg.o(.text.lis2dw12_full_scale_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2dw12_full_scale_get &rArr; OUTLINED_FUNCTION_9
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_GetSensitivity
</UL>

<P><STRONG><a name="[13b]"></a>lis2dw12_full_scale_set</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lis2dw12_reg.o(.text.lis2dw12_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lis2dw12_full_scale_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_Init
</UL>

<P><STRONG><a name="[131]"></a>lis2dw12_power_mode_get</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lis2dw12_reg.o(.text.lis2dw12_power_mode_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lis2dw12_power_mode_get &rArr; OUTLINED_FUNCTION_1
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_GetAxesRaw
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_GetSensitivity
</UL>

<P><STRONG><a name="[136]"></a>lis2dw12_power_mode_set</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lis2dw12_reg.o(.text.lis2dw12_power_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lis2dw12_power_mode_set &rArr; OUTLINED_FUNCTION_1
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_SetOutputDataRate_When_Enabled
</UL>

<P><STRONG><a name="[191]"></a>lis2dw12_read_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lis2dw12_reg.o(.text.lis2dw12_read_reg))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_acceleration_raw_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_get
</UL>

<P><STRONG><a name="[140]"></a>lis2dw12_write_reg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lis2dw12_reg.o(.text.lis2dw12_write_reg))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_Write_Reg
</UL>

<P><STRONG><a name="[146]"></a>lis2mdl_block_data_update_set</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lis2mdl_reg.o(.text.lis2mdl_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_block_data_update_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
</UL>

<P><STRONG><a name="[148]"></a>lis2mdl_data_rate_set</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lis2mdl_reg.o(.text.lis2mdl_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
</UL>

<P><STRONG><a name="[150]"></a>lis2mdl_device_id_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.lis2mdl_device_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_ReadID
</UL>

<P><STRONG><a name="[153]"></a>lis2mdl_i2c_interface_set</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lis2mdl_reg.o(.text.lis2mdl_i2c_interface_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_i2c_interface_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_RegisterBusIO
</UL>

<P><STRONG><a name="[14e]"></a>lis2mdl_magnetic_raw_get</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, lis2mdl_reg.o(.text.lis2mdl_magnetic_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_magnetic_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_GetAxes
</UL>

<P><STRONG><a name="[147]"></a>lis2mdl_operating_mode_set</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lis2mdl_reg.o(.text.lis2mdl_operating_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_operating_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_Enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
</UL>

<P><STRONG><a name="[16e]"></a>lis2mdl_read_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.lis2mdl_read_reg))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData
</UL>

<P><STRONG><a name="[149]"></a>lis2mdl_self_test_set</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lis2mdl_reg.o(.text.lis2mdl_self_test_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_self_test_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
</UL>

<P><STRONG><a name="[16c]"></a>lis2mdl_write_reg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.lis2mdl_write_reg))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData
</UL>

<P><STRONG><a name="[15a]"></a>lps22hh_auto_increment_set</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_auto_increment_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lps22hh_auto_increment_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Init
</UL>

<P><STRONG><a name="[159]"></a>lps22hh_block_data_update_set</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lps22hh_block_data_update_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Init
</UL>

<P><STRONG><a name="[157]"></a>lps22hh_data_rate_set</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lps22hh_data_rate_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[164]"></a>lps22hh_device_id_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lps22hh_reg.o(.text.lps22hh_device_id_get))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_ReadID
</UL>

<P><STRONG><a name="[16a]"></a>lps22hh_from_lsb_to_celsius</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lps22hh_reg.o(.text.lps22hh_from_lsb_to_celsius))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[162]"></a>lps22hh_from_lsb_to_hpa</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lps22hh_reg.o(.text.lps22hh_from_lsb_to_hpa))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_GetPressure
</UL>

<P><STRONG><a name="[156]"></a>lps22hh_i3c_interface_set</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_i3c_interface_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lps22hh_i3c_interface_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Init
</UL>

<P><STRONG><a name="[158]"></a>lps22hh_lp_bandwidth_set</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lps22hh_reg.o(.text.lps22hh_lp_bandwidth_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lps22hh_lp_bandwidth_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Init
</UL>

<P><STRONG><a name="[160]"></a>lps22hh_pressure_raw_get</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lps22hh_reg.o(.text.lps22hh_pressure_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lps22hh_pressure_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_GetPressure
</UL>

<P><STRONG><a name="[193]"></a>lps22hh_read_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lps22hh_reg.o(.text.lps22hh_read_reg))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_pressure_raw_get
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
</UL>

<P><STRONG><a name="[169]"></a>lps22hh_temperature_raw_get</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, lps22hh_reg.o(.text.lps22hh_temperature_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lps22hh_temperature_raw_get &rArr; OUTLINED_FUNCTION_10
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[16b]"></a>lps22hh_write_reg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lps22hh_reg.o(.text.lps22hh_write_reg))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Write_Reg
</UL>

<P><STRONG><a name="[176]"></a>lsm6dso_acceleration_raw_get</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lsm6dso_reg.o(.text.lsm6dso_acceleration_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm6dso_acceleration_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_61
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GetAxes
</UL>

<P><STRONG><a name="[181]"></a>lsm6dso_angular_rate_raw_get</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lsm6dso_reg.o(.text.lsm6dso_angular_rate_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm6dso_angular_rate_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_61
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_GetAxes
</UL>

<P><STRONG><a name="[185]"></a>lsm6dso_auto_increment_set</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lsm6dso_reg.o(.text.lsm6dso_auto_increment_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dso_auto_increment_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_58
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
</UL>

<P><STRONG><a name="[186]"></a>lsm6dso_block_data_update_set</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lsm6dso_reg.o(.text.lsm6dso_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dso_block_data_update_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_58
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
</UL>

<P><STRONG><a name="[18a]"></a>lsm6dso_device_id_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.lsm6dso_device_id_get))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_55
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ReadID
</UL>

<P><STRONG><a name="[187]"></a>lsm6dso_fifo_mode_set</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lsm6dso_reg.o(.text.lsm6dso_fifo_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dso_fifo_mode_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_36
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
</UL>

<P><STRONG><a name="[1f2]"></a>lsm6dso_fsm_data_rate_get</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lsm6dso_reg.o(.text.lsm6dso_fsm_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lsm6dso_fsm_data_rate_get &rArr; OUTLINED_FUNCTION_16 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_81
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
</UL>

<P><STRONG><a name="[1f4]"></a>lsm6dso_fsm_enable_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dso_reg.o(.text.lsm6dso_fsm_enable_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6dso_fsm_enable_get &rArr; OUTLINED_FUNCTION_7 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
</UL>

<P><STRONG><a name="[17d]"></a>lsm6dso_gy_data_rate_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lsm6dso_reg.o(.text.lsm6dso_gy_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm6dso_gy_data_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_Disable
</UL>

<P><STRONG><a name="[17e]"></a>lsm6dso_gy_data_rate_set</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lsm6dso_reg.o(.text.lsm6dso_gy_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lsm6dso_gy_data_rate_set &rArr; lsm6dso_fsm_data_rate_get &rArr; OUTLINED_FUNCTION_16 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_data_rate_get
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_enable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_Disable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_Enable
</UL>

<P><STRONG><a name="[183]"></a>lsm6dso_gy_full_scale_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lsm6dso_reg.o(.text.lsm6dso_gy_full_scale_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm6dso_gy_full_scale_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_85
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_GetSensitivity
</UL>

<P><STRONG><a name="[189]"></a>lsm6dso_gy_full_scale_set</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lsm6dso_reg.o(.text.lsm6dso_gy_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dso_gy_full_scale_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_53
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
</UL>

<P><STRONG><a name="[184]"></a>lsm6dso_i3c_disable_set</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lsm6dso_reg.o(.text.lsm6dso_i3c_disable_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dso_i3c_disable_set &rArr; OUTLINED_FUNCTION_3
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_52
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
</UL>

<P><STRONG><a name="[19b]"></a>lsm6dso_mem_bank_set</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lsm6dso_reg.o(.text.lsm6dso_mem_bank_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_enable_get
</UL>

<P><STRONG><a name="[18f]"></a>lsm6dso_read_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.lsm6dso_read_reg))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_55
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_angular_rate_raw_get
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_full_scale_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_acceleration_raw_get
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_full_scale_get
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_get
</UL>

<P><STRONG><a name="[18d]"></a>lsm6dso_write_reg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.lsm6dso_write_reg))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Write_Reg
</UL>

<P><STRONG><a name="[170]"></a>lsm6dso_xl_data_rate_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lsm6dso_reg.o(.text.lsm6dso_xl_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm6dso_xl_data_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_59
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Disable
</UL>

<P><STRONG><a name="[171]"></a>lsm6dso_xl_data_rate_set</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lsm6dso_reg.o(.text.lsm6dso_xl_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lsm6dso_xl_data_rate_set &rArr; lsm6dso_fsm_data_rate_get &rArr; OUTLINED_FUNCTION_16 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_data_rate_get
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_enable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Disable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Enable
</UL>

<P><STRONG><a name="[179]"></a>lsm6dso_xl_full_scale_get</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lsm6dso_reg.o(.text.lsm6dso_xl_full_scale_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lsm6dso_xl_full_scale_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_76
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GetSensitivity
</UL>

<P><STRONG><a name="[188]"></a>lsm6dso_xl_full_scale_set</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lsm6dso_reg.o(.text.lsm6dso_xl_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dso_xl_full_scale_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
</UL>

<P><STRONG><a name="[a2]"></a>mag_enable_acc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iks01a3.o(.text.mag_enable_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mag_enable_acc &rArr; LIS2MDL_MAG_Enable &rArr; OUTLINED_FUNCTION_1 &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.magnetometer)
</UL>
<P><STRONG><a name="[a4]"></a>mag_get_a_axes</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, iks01a3.o(.text.mag_get_a_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mag_get_a_axes &rArr; LIS2MDL_MAG_GetAxes &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_GetAxes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.magnetometer)
</UL>
<P><STRONG><a name="[a1]"></a>mag_init</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, iks01a3.o(.text.mag_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mag_init &rArr; LIS2MDL_Init &rArr; OUTLINED_FUNCTION_1 &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_GetCapabilities
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_ReadID
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_RegisterBusIO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.magnetometer)
</UL>
<P><STRONG><a name="[a3]"></a>mag_read_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iks01a3.o(.text.mag_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mag_read_id &rArr; LIS2MDL_ReadID &rArr; OUTLINED_FUNCTION_2 &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_ReadID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.magnetometer)
</UL>
<P><STRONG><a name="[64]"></a>main</STRONG> (Thumb, 292 bytes, Stack size 288 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = main &rArr; l_joystick &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initITSboard
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_buffer
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_measure
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alarm
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_joystick
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_csv
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_demo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a6]"></a>press_temp_enable_press</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iks01a3.o(.text.press_temp_enable_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = press_temp_enable_press &rArr; LPS22HH_PRESS_Enable &rArr; OUTLINED_FUNCTION_3 &rArr; lps22hh_data_rate_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.press_temp)
</UL>
<P><STRONG><a name="[a7]"></a>press_temp_enable_temp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iks01a3.o(.text.press_temp_enable_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = press_temp_enable_temp &rArr; LPS22HH_TEMP_Enable &rArr; OUTLINED_FUNCTION_3 &rArr; lps22hh_data_rate_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.press_temp)
</UL>
<P><STRONG><a name="[a9]"></a>press_temp_get_press</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iks01a3.o(.text.press_temp_get_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = press_temp_get_press &rArr; LPS22HH_PRESS_GetPressure &rArr; lps22hh_pressure_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_GetPressure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.press_temp)
</UL>
<P><STRONG><a name="[aa]"></a>press_temp_get_temp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iks01a3.o(.text.press_temp_get_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = press_temp_get_temp &rArr; LPS22HH_TEMP_GetTemperature &rArr; lps22hh_temperature_raw_get &rArr; OUTLINED_FUNCTION_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_GetTemperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.press_temp)
</UL>
<P><STRONG><a name="[a5]"></a>press_temp_init</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, iks01a3.o(.text.press_temp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = press_temp_init &rArr; LPS22HH_Init &rArr; lps22hh_auto_increment_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_GetCapabilities
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_ReadID
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_RegisterBusIO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.press_temp)
</UL>
<P><STRONG><a name="[a8]"></a>press_temp_read_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iks01a3.o(.text.press_temp_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = press_temp_read_id &rArr; LPS22HH_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_ReadID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.press_temp)
</UL>
<P><STRONG><a name="[7c]"></a>print_double</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, main.o(.text.print_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = print_double &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.l_demo)
</UL>
<P><STRONG><a name="[1d2]"></a>stdinout_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stdinout_usart.o(.text.stdinout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stdinout_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initITSboard
</UL>

<P><STRONG><a name="[1c0]"></a>stdout_putchar</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stdinout_usart.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1a9]"></a>stts751_device_id_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stts751_reg.o(.text.stts751_device_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stts751_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_ReadID
</UL>

<P><STRONG><a name="[1af]"></a>stts751_from_lsb_to_celsius</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stts751_reg.o(.text.stts751_from_lsb_to_celsius))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[1a5]"></a>stts751_pin_event_route_set</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, stts751_reg.o(.text.stts751_pin_event_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stts751_pin_event_route_set
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_Init
</UL>

<P><STRONG><a name="[1b0]"></a>stts751_resolution_get</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, stts751_reg.o(.text.stts751_resolution_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stts751_resolution_get
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_TEMP_SetOutputDataRate
</UL>

<P><STRONG><a name="[1a6]"></a>stts751_resolution_set</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, stts751_reg.o(.text.stts751_resolution_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stts751_resolution_set
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_TEMP_SetOutputDataRate
</UL>

<P><STRONG><a name="[1a7]"></a>stts751_temp_data_rate_set</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stts751_reg.o(.text.stts751_temp_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stts751_temp_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_TEMP_SetOutputDataRate
</UL>

<P><STRONG><a name="[1ae]"></a>stts751_temperature_raw_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stts751_reg.o(.text.stts751_temperature_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stts751_temperature_raw_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_TEMP_GetTemperature
</UL>

<P><STRONG><a name="[ac]"></a>temp_enable_temp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iks01a3.o(.text.temp_enable_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = temp_enable_temp &rArr; STTS751_TEMP_Enable &rArr; STTS751_TEMP_SetOutputDataRate &rArr; stts751_temp_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_TEMP_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.temp)
</UL>
<P><STRONG><a name="[ae]"></a>temp_get_temp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iks01a3.o(.text.temp_get_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = temp_get_temp &rArr; STTS751_TEMP_GetTemperature &rArr; stts751_temperature_raw_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_TEMP_GetTemperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.temp)
</UL>
<P><STRONG><a name="[ab]"></a>temp_init</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, iks01a3.o(.text.temp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = temp_init &rArr; STTS751_Init &rArr; stts751_temp_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_GetCapabilities
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_ReadID
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_RegisterBusIO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.temp)
</UL>
<P><STRONG><a name="[ad]"></a>temp_read_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iks01a3.o(.text.temp_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = temp_read_id &rArr; STTS751_ReadID &rArr; stts751_device_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_ReadID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iks01a3.o(.data.temp)
</UL>
<P><STRONG><a name="[208]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22b]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[7b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_buffer
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alarm
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_joystick
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_csv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.l_demo)
<LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[22c]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[22d]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[20a]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22e]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[200]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_double
</UL>

<P><STRONG><a name="[22f]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[230]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[20d]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[20b]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1d9]"></a>__hardfp_atan2</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_joystick
</UL>

<P><STRONG><a name="[210]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[20c]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[211]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[20e]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[231]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[232]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[233]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[214]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[212]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[20f]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[7a]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = puts &rArr; fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_buffer
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_measure
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alarm
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_joystick
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_csv
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_demo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.l_demo)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[103]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[da]"></a>OUTLINED_FUNCTION_59</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_59))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[de]"></a>OUTLINED_FUNCTION_76</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_76))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[df]"></a>OUTLINED_FUNCTION_73</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_73))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[e1]"></a>OUTLINED_FUNCTION_44</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_44))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[e2]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[f5]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_43
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>

<P><STRONG><a name="[e4]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[124]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[125]"></a>OUTLINED_FUNCTION_79</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_79))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[f7]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_67
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[f8]"></a>OUTLINED_FUNCTION_31</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_31))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[f9]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[fa]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>

<P><STRONG><a name="[fb]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[128]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
</UL>

<P><STRONG><a name="[129]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
</UL>

<P><STRONG><a name="[e3]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_15 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[ea]"></a>OUTLINED_FUNCTION_57</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_57))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[eb]"></a>OUTLINED_FUNCTION_80</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_80))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[ed]"></a>OUTLINED_FUNCTION_30</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_30))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_30 &rArr; I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[ee]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[ef]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[f0]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[f1]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[f2]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[12a]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_52
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
</UL>

<P><STRONG><a name="[12b]"></a>OUTLINED_FUNCTION_52</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_52))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>

<P><STRONG><a name="[f3]"></a>OUTLINED_FUNCTION_33</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_33))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[e9]"></a>OUTLINED_FUNCTION_82</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_82))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[e5]"></a>OUTLINED_FUNCTION_35</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_35))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[e6]"></a>OUTLINED_FUNCTION_71</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_71))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[e7]"></a>OUTLINED_FUNCTION_46</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_46))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[f6]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; OUTLINED_FUNCTION_43 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_43
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_82
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[127]"></a>OUTLINED_FUNCTION_43</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_43))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_43 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[e8]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_28 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_67
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_79
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[ec]"></a>OUTLINED_FUNCTION_47</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_47))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[123]"></a>OUTLINED_FUNCTION_28</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_28))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_28 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[126]"></a>OUTLINED_FUNCTION_67</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_67))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_67 &rArr; I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[d7]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c_ex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>

<P><STRONG><a name="[d8]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>

<P><STRONG><a name="[105]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>

<P><STRONG><a name="[10a]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[107]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1d7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_demo
</UL>

<P><STRONG><a name="[194]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_joystick
</UL>

<P><STRONG><a name="[1d0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, init.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initITSboard
</UL>

<P><STRONG><a name="[1d1]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, init.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initITSboard
</UL>

<P><STRONG><a name="[7f]"></a>USARTx_GetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USARTx_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[80]"></a>USART3_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART3_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[81]"></a>USART3_Initialize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usart_stm32f4xx.o(.text.USART3_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_Initialize &rArr; Enable_GPIO_Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[1b6]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 416 bytes, Stack size 12 bytes, usart_stm32f4xx.o(.text.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
</UL>

<P><STRONG><a name="[82]"></a>USART3_Uninitialize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usart_stm32f4xx.o(.text.USART3_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART3_Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[1b7]"></a>USART_PowerControl</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usart_stm32f4xx.o(.text.USART_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PowerControl
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Uninitialize
</UL>

<P><STRONG><a name="[83]"></a>USART3_PowerControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART3_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_PowerControl &rArr; USART_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[84]"></a>USART3_Send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART3_Send))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[1b9]"></a>USART_Send</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART_Send))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Transfer
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send
</UL>

<P><STRONG><a name="[85]"></a>USART3_Receive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART3_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_Receive &rArr; USART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[1b8]"></a>USART_Receive</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usart_stm32f4xx.o(.text.USART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Transfer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Receive
</UL>

<P><STRONG><a name="[86]"></a>USART3_Transfer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usart_stm32f4xx.o(.text.USART3_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_Transfer &rArr; USART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[87]"></a>USART3_GetTxCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART3_GetTxCount))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[88]"></a>USART3_GetRxCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART3_GetRxCount))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[89]"></a>USART3_Control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART3_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USART3_Control &rArr; USART_Control &rArr;  USART_Control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[1b3]"></a>USART_Control</STRONG> (Thumb, 1328 bytes, Stack size 72 bytes, usart_stm32f4xx.o(.text.USART_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + In Cycle
<LI>Call Chain = USART_Control &rArr;  USART_Control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Control
</UL>

<P><STRONG><a name="[8a]"></a>USART3_GetStatus</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usart_stm32f4xx.o(.text.USART3_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[8b]"></a>USART3_SetModemControl</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART3_SetModemControl))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[8c]"></a>USART3_GetModemStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.USART3_GetModemStatus))
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f4xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[1ba]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart_stm32f4xx.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>

<P><STRONG><a name="[1bc]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iks01a3.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_gyro_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_init
</UL>

<P><STRONG><a name="[1bd]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iks01a3.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_gyro_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_init
</UL>

<P><STRONG><a name="[1bb]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iks01a3.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_get_a_axes
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_get_a_axes
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_gyro_get_g_axes
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_gyro_get_a_axes
</UL>

<P><STRONG><a name="[1cc]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iks01a3.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_init
</UL>

<P><STRONG><a name="[1ca]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iks01a3.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_get_temp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_get_temp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_get_press
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_get_temp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_get_hum
</UL>

<P><STRONG><a name="[1cb]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iks01a3.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_get_temp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_get_temp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_temp_get_press
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_get_temp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hum_temp_get_hum
</UL>

<P><STRONG><a name="[ca]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_nucleo_bus.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_WriteReg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_ReadReg
</UL>

<P><STRONG><a name="[ce]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_nucleo_bus.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; OUTLINED_FUNCTION_43 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_WriteReg
</UL>

<P><STRONG><a name="[cc]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_nucleo_bus.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_WriteReg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_ReadReg
</UL>

<P><STRONG><a name="[cd]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_nucleo_bus.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_WriteReg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_ReadReg
</UL>

<P><STRONG><a name="[cb]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_nucleo_bus.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_28 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_ReadReg
</UL>

<P><STRONG><a name="[173]"></a>OUTLINED_FUNCTION_30</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lsm6dso.o(.text.OUTLINED_FUNCTION_30))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_RegisterBusIO
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_DeInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_Enable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Enable
</UL>

<P><STRONG><a name="[17a]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lsm6dso.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_GetSensitivity
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GetSensitivity
</UL>

<P><STRONG><a name="[17b]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lsm6dso.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_GetSensitivity
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GetSensitivity
</UL>

<P><STRONG><a name="[175]"></a>OUTLINED_FUNCTION_31</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lsm6dso.o(.text.OUTLINED_FUNCTION_31))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GetAxes
</UL>

<P><STRONG><a name="[178]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lsm6dso.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_GYRO_GetAxes
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GetAxes
</UL>

<P><STRONG><a name="[6f]"></a>ReadRegWrap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dso.o(.text.ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dso.o(.text.LSM6DSO_RegisterBusIO)
</UL>
<P><STRONG><a name="[70]"></a>WriteRegWrap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dso.o(.text.WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dso.o(.text.LSM6DSO_RegisterBusIO)
</UL>
<P><STRONG><a name="[18e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_mem_bank_set
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_full_scale_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_full_scale_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_mode_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_block_data_update_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_auto_increment_set
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_i3c_disable_set
</UL>

<P><STRONG><a name="[1fc]"></a>OUTLINED_FUNCTION_32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_32))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_full_scale_set
</UL>

<P><STRONG><a name="[19e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_mem_bank_set
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_full_scale_set
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_full_scale_set
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_mode_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_block_data_update_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_auto_increment_set
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_i3c_disable_set
</UL>

<P><STRONG><a name="[1fb]"></a>OUTLINED_FUNCTION_76</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_76))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_full_scale_get
</UL>

<P><STRONG><a name="[1f5]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
</UL>

<P><STRONG><a name="[196]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_data_rate_set
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_set
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_i3c_disable_set
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_data_rate_get
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_enable_get
</UL>

<P><STRONG><a name="[1a1]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_data_rate_get
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_enable_get
</UL>

<P><STRONG><a name="[1f3]"></a>OUTLINED_FUNCTION_81</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_81))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_data_rate_get
</UL>

<P><STRONG><a name="[19a]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_16 &rArr; lsm6dso_mem_bank_set &rArr; OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fsm_data_rate_get
</UL>

<P><STRONG><a name="[1fa]"></a>OUTLINED_FUNCTION_59</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_59))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_xl_data_rate_get
</UL>

<P><STRONG><a name="[1f7]"></a>OUTLINED_FUNCTION_53</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_53))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_full_scale_set
</UL>

<P><STRONG><a name="[1f6]"></a>OUTLINED_FUNCTION_85</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_85))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_gy_full_scale_get
</UL>

<P><STRONG><a name="[1f0]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_block_data_update_set
</UL>

<P><STRONG><a name="[1ef]"></a>OUTLINED_FUNCTION_58</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_58))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_block_data_update_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_auto_increment_set
</UL>

<P><STRONG><a name="[19f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_3
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_i3c_disable_set
</UL>

<P><STRONG><a name="[1a0]"></a>OUTLINED_FUNCTION_55</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_55))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_device_id_get
</UL>

<P><STRONG><a name="[1ed]"></a>OUTLINED_FUNCTION_61</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_61))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_angular_rate_raw_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_acceleration_raw_get
</UL>

<P><STRONG><a name="[1f9]"></a>OUTLINED_FUNCTION_31</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_31))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_mem_bank_set
</UL>

<P><STRONG><a name="[1ee]"></a>OUTLINED_FUNCTION_23</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_23))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_auto_increment_set
</UL>

<P><STRONG><a name="[1f1]"></a>OUTLINED_FUNCTION_36</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_36))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_fifo_mode_set
</UL>

<P><STRONG><a name="[1f8]"></a>OUTLINED_FUNCTION_52</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lsm6dso_reg.o(.text.OUTLINED_FUNCTION_52))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dso_i3c_disable_set
</UL>

<P><STRONG><a name="[12d]"></a>LIS2DW12_ACC_SetOutputDataRate_When_Enabled</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, lis2dw12.o(.text.LIS2DW12_ACC_SetOutputDataRate_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LIS2DW12_ACC_SetOutputDataRate_When_Enabled &rArr; lis2dw12_data_rate_set &rArr; OUTLINED_FUNCTION_1
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_data_rate_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_Enable
</UL>

<P><STRONG><a name="[69]"></a>ReadRegWrap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lis2dw12.o(.text.ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2dw12.o(.text.LIS2DW12_RegisterBusIO)
</UL>
<P><STRONG><a name="[6a]"></a>WriteRegWrap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lis2dw12.o(.text.WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2dw12.o(.text.LIS2DW12_RegisterBusIO)
</UL>
<P><STRONG><a name="[134]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lis2dw12.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2DW12_ACC_SetOutputDataRate_When_Enabled
</UL>

<P><STRONG><a name="[190]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lis2dw12_reg.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_full_scale_set
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_data_rate_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_set
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_fifo_mode_set
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_block_data_update_set
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_auto_increment_set
</UL>

<P><STRONG><a name="[1dc]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lis2dw12_reg.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_full_scale_set
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_data_rate_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_set
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_fifo_mode_set
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_block_data_update_set
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_auto_increment_set
</UL>

<P><STRONG><a name="[197]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lis2dw12_reg.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_data_rate_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_set
</UL>

<P><STRONG><a name="[1de]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lis2dw12_reg.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_data_rate_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_set
</UL>

<P><STRONG><a name="[1a2]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lis2dw12_reg.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_9
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_full_scale_get
</UL>

<P><STRONG><a name="[1dd]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lis2dw12_reg.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_block_data_update_set
</UL>

<P><STRONG><a name="[1df]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lis2dw12_reg.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_full_scale_set
</UL>

<P><STRONG><a name="[199]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lis2dw12_reg.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_device_id_get
</UL>

<P><STRONG><a name="[1db]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lis2dw12_reg.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_auto_increment_set
</UL>

<P><STRONG><a name="[142]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lis2mdl.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_ReadID
</UL>

<P><STRONG><a name="[143]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lis2mdl.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_Enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
</UL>

<P><STRONG><a name="[144]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lis2mdl.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_Enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
</UL>

<P><STRONG><a name="[145]"></a>LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, lis2mdl.o(.text.LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_read_reg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_write_reg
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Write_Reg
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[14b]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lis2mdl.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_Enable
</UL>

<P><STRONG><a name="[14d]"></a>LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, lis2mdl.o(.text.LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_read_reg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_write_reg
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_GetAxes
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[6b]"></a>ReadMagRegWrap</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lis2mdl.o(.text.ReadMagRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadMagRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl.o(.text.LIS2MDL_RegisterBusIO)
</UL>
<P><STRONG><a name="[6c]"></a>WriteMagRegWrap</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lis2mdl.o(.text.WriteMagRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteMagRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl.o(.text.LIS2MDL_RegisterBusIO)
</UL>
<P><STRONG><a name="[154]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lis2mdl.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Write_Reg
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData
</UL>

<P><STRONG><a name="[16d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lis2mdl.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData
</UL>

<P><STRONG><a name="[1e7]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_magnetic_raw_get
</UL>

<P><STRONG><a name="[1e8]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_magnetic_raw_get
</UL>

<P><STRONG><a name="[1e0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_i2c_interface_set
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_self_test_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_data_rate_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_operating_mode_set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_block_data_update_set
</UL>

<P><STRONG><a name="[1e4]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_data_rate_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_operating_mode_set
</UL>

<P><STRONG><a name="[1e5]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_data_rate_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_operating_mode_set
</UL>

<P><STRONG><a name="[1e3]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_i2c_interface_set
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_self_test_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_data_rate_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_operating_mode_set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_block_data_update_set
</UL>

<P><STRONG><a name="[1e2]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_block_data_update_set
</UL>

<P><STRONG><a name="[1e1]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_i2c_interface_set
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_self_test_set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_block_data_update_set
</UL>

<P><STRONG><a name="[1e6]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_i2c_interface_set
</UL>

<P><STRONG><a name="[1e9]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lis2mdl_reg.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_self_test_set
</UL>

<P><STRONG><a name="[118]"></a>HTS221_SetOutputDataRate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_SetOutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HTS221_SetOutputDataRate &rArr; hts221_data_rate_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[10d]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hts221.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_Enable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_Enable
</UL>

<P><STRONG><a name="[10c]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hts221.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; hts221_power_on_set
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_Enable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_Enable
</UL>

<P><STRONG><a name="[114]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hts221.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_TEMP_GetTemperature
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_HUM_GetHumidity
</UL>

<P><STRONG><a name="[67]"></a>ReadRegWrap</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hts221.o(.text.ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.text.HTS221_RegisterBusIO)
</UL>
<P><STRONG><a name="[68]"></a>WriteRegWrap</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hts221.o(.text.WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.text.HTS221_RegisterBusIO)
</UL>
<P><STRONG><a name="[1c1]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hts221_reg.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_set
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_block_data_update_set
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>

<P><STRONG><a name="[1c3]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hts221_reg.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_data_rate_set
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_block_data_update_set
</UL>

<P><STRONG><a name="[1c4]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hts221_reg.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temperature_raw_get
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_adc_point_1_get
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_adc_point_0_get
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_humidity_raw_get
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_rh_point_1_get
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_adc_point_1_get
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_rh_point_0_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_adc_point_0_get
</UL>

<P><STRONG><a name="[1c2]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hts221_reg.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_block_data_update_set
</UL>

<P><STRONG><a name="[1c7]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hts221_reg.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_power_on_set
</UL>

<P><STRONG><a name="[1c6]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hts221_reg.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_rh_point_1_get
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_rh_point_0_get
</UL>

<P><STRONG><a name="[1c8]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hts221_reg.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_deg_point_1_get
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_deg_point_0_get
</UL>

<P><STRONG><a name="[1c9]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hts221_reg.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_deg_point_1_get
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_deg_point_0_get
</UL>

<P><STRONG><a name="[1c5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hts221_reg.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_adc_point_1_get
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_temp_adc_point_0_get
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_adc_point_1_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hts221_hum_adc_point_0_get
</UL>

<P><STRONG><a name="[15b]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lps22hh.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_Init
</UL>

<P><STRONG><a name="[15e]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lps22hh.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_Enable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_Enable
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_RegisterBusIO
</UL>

<P><STRONG><a name="[15d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lps22hh.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; lps22hh_data_rate_set &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_Enable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_Enable
</UL>

<P><STRONG><a name="[161]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lps22hh.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_TEMP_GetTemperature
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HH_PRESS_GetPressure
</UL>

<P><STRONG><a name="[6d]"></a>ReadRegWrap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lps22hh.o(.text.ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.text.LPS22HH_RegisterBusIO)
</UL>
<P><STRONG><a name="[6e]"></a>WriteRegWrap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lps22hh.o(.text.WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hh.o(.text.LPS22HH_RegisterBusIO)
</UL>
<P><STRONG><a name="[192]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hh_reg.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_auto_increment_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_block_data_update_set
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_lp_bandwidth_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_i3c_interface_set
</UL>

<P><STRONG><a name="[1ea]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lps22hh_reg.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_auto_increment_set
</UL>

<P><STRONG><a name="[1eb]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lps22hh_reg.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_auto_increment_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_block_data_update_set
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_lp_bandwidth_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_data_rate_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_i3c_interface_set
</UL>

<P><STRONG><a name="[198]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps22hh_reg.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_10
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_temperature_raw_get
</UL>

<P><STRONG><a name="[19c]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lps22hh_reg.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_device_id_get
</UL>

<P><STRONG><a name="[1ec]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lps22hh_reg.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lps22hh_pressure_raw_get
</UL>

<P><STRONG><a name="[1aa]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stts751.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_TEMP_GetTemperature
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_ReadID
</UL>

<P><STRONG><a name="[1b1]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stts751.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STTS751_TEMP_SetOutputDataRate
</UL>

<P><STRONG><a name="[71]"></a>ReadRegWrap</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stts751.o(.text.ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadRegWrap
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stts751.o(.text.STTS751_RegisterBusIO)
</UL>
<P><STRONG><a name="[72]"></a>WriteRegWrap</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stts751.o(.text.WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteRegWrap
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stts751.o(.text.STTS751_RegisterBusIO)
</UL>
<P><STRONG><a name="[1a3]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stts751.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegWrap
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegWrap
</UL>

<P><STRONG><a name="[203]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stts751_reg.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_temp_data_rate_set
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_resolution_set
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_pin_event_route_set
</UL>

<P><STRONG><a name="[202]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stts751_reg.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_resolution_set
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_pin_event_route_set
</UL>

<P><STRONG><a name="[205]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stts751_reg.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_resolution_get
</UL>

<P><STRONG><a name="[204]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stts751_reg.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stts751_pin_event_route_set
</UL>

<P><STRONG><a name="[215]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[209]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[218]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[217]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
